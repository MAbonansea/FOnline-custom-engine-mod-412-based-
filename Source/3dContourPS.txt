// Contours shader

sampler2D SpriteTex;

float WidthStep;
float HeightStep;
float4 SpriteBorders;
float3 SpriteBordersHeight;
float4 ContourColor;
float ContourColorOffs;


bool CheckPixel(in float x, in float y, inout float2 input, inout float4 output)
{
	bool result=false;
	if(tex2D(SpriteTex,float2(x,y)).a!=0.0f)
	{
		output=ContourColor;
		if(input.y>=SpriteBordersHeight[0] && input.y<=SpriteBordersHeight[1])
		{
			float v=(input.y-SpriteBordersHeight[0])/SpriteBordersHeight[2]+ContourColorOffs;
			if(v>1.0f) v=2.0f-v;
			else if(v<0.0f) v=-v;
			output.rgb+=v*0.60f-0.30f;
			output.rgb=saturate(output.rgb);
		}
		result=true;
	}
	return result;
}

float4 Main(float2 input : TEXCOORD) : COLOR
{
	float4 output = 0.0f;

	float l=input.x-WidthStep;
	float r=input.x+WidthStep;
	float t=input.y-HeightStep;
	float b=input.y+HeightStep;

	if(l<SpriteBorders[0]) CheckPixel(r,input.y,input,output);
	else if(r>SpriteBorders[2]) CheckPixel(l,input.y,input,output);
	else if(t<SpriteBorders[1]) CheckPixel(input.x,b,input,output);
	else if(b>SpriteBorders[3]) CheckPixel(input.x,t,input,output);
	else if(tex2D(SpriteTex,input).a==0.0f)
	{
		CheckPixel(r,input.y,input,output) ||
		CheckPixel(l,input.y,input,output) ||
		CheckPixel(input.x,t,input,output) ||
		CheckPixel(input.x,b,input,output);
	}

	return output;
}
